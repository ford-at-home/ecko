#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const echoes_storage_stack_1 = require("../lib/echoes-storage-stack");
const echoes_auth_stack_1 = require("../lib/echoes-auth-stack");
const echoes_api_stack_1 = require("../lib/echoes-api-stack");
const echoes_notif_stack_1 = require("../lib/echoes-notif-stack");
const frontend_stack_1 = require("../lib/frontend-stack");
const network_stack_1 = require("../lib/network-stack");
const frontend_config_construct_1 = require("../lib/frontend-config-construct");
const app = new cdk.App();
// Get environment configuration
const environment = app.node.tryGetContext('environment') || 'dev';
const account = app.node.tryGetContext('account') || process.env.CDK_DEFAULT_ACCOUNT;
const region = app.node.tryGetContext('region') || process.env.CDK_DEFAULT_REGION || 'us-east-1';
const env = { account, region };
// Stack naming convention
const stackPrefix = `Echoes-${environment}`;
// Storage stack (S3 + DynamoDB)
const storageStack = new echoes_storage_stack_1.EchoesStorageStack(app, `${stackPrefix}-Storage`, {
    env,
    description: `Echoes storage resources for ${environment} environment`,
    environment,
});
// Authentication stack (Cognito)
const authStack = new echoes_auth_stack_1.EchoesAuthStack(app, `${stackPrefix}-Auth`, {
    env,
    description: `Echoes authentication resources for ${environment} environment`,
    environment,
});
// API stack (Lambda + API Gateway)
const apiStack = new echoes_api_stack_1.EchoesApiStack(app, `${stackPrefix}-Api`, {
    env,
    description: `Echoes API resources for ${environment} environment`,
    environment,
    bucket: storageStack.audioBucket,
    table: storageStack.echoesTable,
    userPool: authStack.userPool,
    userPoolClient: authStack.userPoolClient,
});
// Notifications stack (EventBridge + SNS)
const notifStack = new echoes_notif_stack_1.EchoesNotifStack(app, `${stackPrefix}-Notif`, {
    env,
    description: `Echoes notification resources for ${environment} environment`,
    environment,
    table: storageStack.echoesTable,
});
// Frontend stack (S3 static hosting)
const frontendStack = new frontend_stack_1.EchoesFrontendStack(app, `${stackPrefix}-Frontend`, {
    env,
    description: `Echoes frontend hosting resources for ${environment} environment`,
    environment,
});
// Network stack (CloudFront CDN)
const networkStack = new network_stack_1.EchoesNetworkStack(app, `${stackPrefix}-Network`, {
    env,
    description: `Echoes network resources for ${environment} environment`,
    environment,
    frontendBucket: frontendStack.websiteBucket,
    originAccessIdentity: frontendStack.originAccessIdentity,
    // Optional: Add custom domain if available
    // domainName: 'echoes.app',
});
// Create a separate stack for frontend configuration to avoid circular dependencies
const frontendConfigStack = new cdk.Stack(app, `${stackPrefix}-Config`, {
    env,
    description: `Echoes frontend configuration for ${environment} environment`,
});
// Frontend configuration - aggregates all outputs for frontend environment
const frontendConfig = new frontend_config_construct_1.FrontendConfig(frontendConfigStack, 'FrontendConfig', {
    environment,
    apiUrl: apiStack.apiUrl,
    cognitoUserPoolId: authStack.userPool.userPoolId,
    cognitoClientId: authStack.userPoolClient.userPoolClientId,
    s3BucketName: storageStack.audioBucket.bucketName,
    cloudFrontUrl: networkStack.distribution.distributionDomainName,
    region: region,
});
// Add dependencies
apiStack.addDependency(storageStack);
apiStack.addDependency(authStack);
notifStack.addDependency(storageStack);
networkStack.addDependency(frontendStack);
// Frontend config depends on all stacks it references
frontendConfigStack.addDependency(apiStack);
frontendConfigStack.addDependency(authStack);
frontendConfigStack.addDependency(storageStack);
frontendConfigStack.addDependency(networkStack);
// Add tags to all stacks
const tags = {
    Project: 'Echoes',
    Environment: environment,
    ManagedBy: 'CDK',
};
Object.values(tags).forEach(([key, value]) => {
    cdk.Tags.of(app).add(key, value);
});
//# sourceMappingURL=data:application/json;base64,