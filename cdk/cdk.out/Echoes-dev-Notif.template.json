{
 "Description": "Echoes notification resources for dev environment",
 "Resources": {
  "EchoesEventBus28950D13": {
   "Type": "AWS::Events::EventBus",
   "Properties": {
    "Name": "echoes-events-dev"
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/EchoesEventBus/Resource"
   }
  },
  "EchoesNotificationTopic42CDF0DE": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "DisplayName": "Echoes Notifications",
    "Tags": [
     {
      "Key": "C",
      "Value": "D"
     },
     {
      "Key": "d",
      "Value": "e"
     },
     {
      "Key": "E",
      "Value": "c"
     }
    ],
    "TopicName": "echoes-notifications-dev"
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/EchoesNotificationTopic/Resource"
   }
  },
  "NotificationDLQCDA15FAF": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 1209600,
    "QueueName": "echoes-notification-dlq-dev",
    "Tags": [
     {
      "Key": "C",
      "Value": "D"
     },
     {
      "Key": "d",
      "Value": "e"
     },
     {
      "Key": "E",
      "Value": "c"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationDLQ/Resource"
   }
  },
  "NotificationQueue36610CC1": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "QueueName": "echoes-notifications-dev",
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "NotificationDLQCDA15FAF",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "Tags": [
     {
      "Key": "C",
      "Value": "D"
     },
     {
      "Key": "d",
      "Value": "e"
     },
     {
      "Key": "E",
      "Value": "c"
     }
    ],
    "VisibilityTimeout": 300
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationQueue/Resource"
   }
  },
  "NotificationQueuePolicyCC060EA6": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "EchoesNotificationTopic42CDF0DE"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "NotificationQueue36610CC1",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "NotificationQueue36610CC1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationQueue/Policy/Resource"
   }
  },
  "NotificationQueueEchoesdevNotifEchoesNotificationTopic797E20BF63BA09ED": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "NotificationQueue36610CC1",
      "Arn"
     ]
    },
    "Protocol": "sqs",
    "RawMessageDelivery": true,
    "TopicArn": {
     "Ref": "EchoesNotificationTopic42CDF0DE"
    }
   },
   "DependsOn": [
    "NotificationQueuePolicyCC060EA6"
   ],
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationQueue/EchoesdevNotifEchoesNotificationTopic797E20BF/Resource"
   }
  },
  "NotificationLambdaRole8517A721": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "C",
      "Value": "D"
     },
     {
      "Key": "d",
      "Value": "e"
     },
     {
      "Key": "E",
      "Value": "c"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationLambdaRole/Resource"
   }
  },
  "NotificationLambdaRoleDefaultPolicy07D18877": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:Scan"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::ImportValue": "Echoes-dev-Storage:ExportsOutputFnGetAttEchoesTable3D95A947Arn5B6A4265"
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::ImportValue": "Echoes-dev-Storage:ExportsOutputFnGetAttEchoesTable3D95A947Arn5B6A4265"
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "EchoesNotificationTopic42CDF0DE"
       }
      },
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "NotificationQueue36610CC1",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "NotificationLambdaRoleDefaultPolicy07D18877",
    "Roles": [
     {
      "Ref": "NotificationLambdaRole8517A721"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationLambdaRole/DefaultPolicy/Resource"
   }
  },
  "NotificationLambda0BF28E71": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\nimport json\nimport boto3\nimport logging\nfrom datetime import datetime, timedelta\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nsns = boto3.client('sns')\ndynamodb = boto3.resource('dynamodb')\n\ndef handler(event, context):\n    \"\"\"\n    Process notification events from EventBridge or SQS\n    \"\"\"\n    try:\n        # Handle EventBridge events\n        if 'source' in event and event['source'] == 'echoes.app':\n            return handle_echo_event(event)\n        \n        # Handle SQS events\n        if 'Records' in event:\n            for record in event['Records']:\n                if record.get('eventSource') == 'aws:sqs':\n                    handle_sqs_message(record)\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps('Notifications processed successfully')\n        }\n        \n    except Exception as e:\n        logger.error(f\"Error processing notifications: {e}\")\n        raise\n\ndef handle_echo_event(event):\n    \"\"\"Handle echo-related events\"\"\"\n    detail = event.get('detail', {})\n    event_type = detail.get('event_type')\n    user_id = detail.get('user_id')\n    \n    if event_type == 'echo_created':\n        schedule_reminder_notification(user_id, detail)\n    elif event_type == 'reminder_due':\n        send_reminder_notification(user_id, detail)\n    \n    return {'statusCode': 200}\n\ndef schedule_reminder_notification(user_id, echo_data):\n    \"\"\"Schedule future reminder notifications\"\"\"\n    # This would typically create EventBridge scheduled rules\n    # For now, just log the scheduling\n    logger.info(f\"Scheduling reminder for user {user_id}: {echo_data}\")\n\ndef send_reminder_notification(user_id, reminder_data):\n    \"\"\"Send actual notification to user\"\"\"\n    message = {\n        'user_id': user_id,\n        'type': 'echo_reminder',\n        'title': 'An Echo wants to say hello',\n        'body': f\"Remember this {reminder_data.get('emotion', 'moment')} from the past?\",\n        'data': reminder_data\n    }\n    \n    # Publish to SNS\n    sns.publish(\n        TopicArn=os.environ['SNS_TOPIC_ARN'],\n        Message=json.dumps(message),\n        Subject='Echo Reminder'\n    )\n    \n    logger.info(f\"Sent reminder notification to user {user_id}\")\n\ndef handle_sqs_message(record):\n    \"\"\"Handle SQS message\"\"\"\n    body = json.loads(record['body'])\n    logger.info(f\"Processing SQS message: {body}\")\n    # Process the message as needed\n      "
    },
    "Environment": {
     "Variables": {
      "ENVIRONMENT": "dev",
      "SNS_TOPIC_ARN": {
       "Ref": "EchoesNotificationTopic42CDF0DE"
      },
      "DYNAMODB_TABLE_NAME": {
       "Fn::ImportValue": "Echoes-dev-Storage:ExportsOutputRefEchoesTable3D95A947F0A99335"
      },
      "EVENT_BUS_NAME": {
       "Ref": "EchoesEventBus28950D13"
      }
     }
    },
    "FunctionName": "echoes-notifications-dev",
    "Handler": "index.handler",
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "NotificationLambdaRole8517A721",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Tags": [
     {
      "Key": "C",
      "Value": "D"
     },
     {
      "Key": "d",
      "Value": "e"
     },
     {
      "Key": "E",
      "Value": "c"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "NotificationLambdaRoleDefaultPolicy07D18877",
    "NotificationLambdaRole8517A721"
   ],
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationLambda/Resource"
   }
  },
  "NotificationLambdaSqsEventSourceEchoesdevNotifNotificationQueue34B8E9858283472C": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 10,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "NotificationQueue36610CC1",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "NotificationLambda0BF28E71"
    },
    "MaximumBatchingWindowInSeconds": 5
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/NotificationLambda/SqsEventSource:EchoesdevNotifNotificationQueue34B8E985/Resource"
   }
  },
  "EchoCreatedRule118BEF1B": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Trigger when a new echo is created",
    "EventBusName": {
     "Ref": "EchoesEventBus28950D13"
    },
    "EventPattern": {
     "source": [
      "echoes.app"
     ],
     "detail-type": [
      "Echo Created"
     ]
    },
    "Name": "echoes-echo-created-dev",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "NotificationLambda0BF28E71",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/EchoCreatedRule/Resource"
   }
  },
  "EchoCreatedRuleAllowEventRuleEchoesdevNotifNotificationLambda4143BEC650A8B088": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "NotificationLambda0BF28E71",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "EchoCreatedRule118BEF1B",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/EchoCreatedRule/AllowEventRuleEchoesdevNotifNotificationLambda4143BEC6"
   }
  },
  "ReminderRule0879F2D0": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Trigger scheduled echo reminders",
    "EventBusName": {
     "Ref": "EchoesEventBus28950D13"
    },
    "EventPattern": {
     "source": [
      "echoes.app"
     ],
     "detail-type": [
      "Echo Reminder"
     ]
    },
    "Name": "echoes-reminder-dev",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "NotificationLambda0BF28E71",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/ReminderRule/Resource"
   }
  },
  "ReminderRuleAllowEventRuleEchoesdevNotifNotificationLambda4143BEC638655A2E": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "NotificationLambda0BF28E71",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ReminderRule0879F2D0",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/ReminderRule/AllowEventRuleEchoesdevNotifNotificationLambda4143BEC6"
   }
  },
  "DailyMaintenanceRuleD77C9C88": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Daily maintenance tasks",
    "Name": "echoes-daily-maintenance-dev",
    "ScheduleExpression": "cron(0 2 * * ? *)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "NotificationLambda0BF28E71",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/DailyMaintenanceRule/Resource"
   }
  },
  "DailyMaintenanceRuleAllowEventRuleEchoesdevNotifNotificationLambda4143BEC68B0FF2A6": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "NotificationLambda0BF28E71",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "DailyMaintenanceRuleD77C9C88",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/DailyMaintenanceRule/AllowEventRuleEchoesdevNotifNotificationLambda4143BEC6"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2WPQU/DMAyFf8vuqVl36hkEN8Rod5/S1CBvbRLqeBOK8t9R0q0gccl7/mzZLzuotw3UG33lygznaqQeYhe0OSt95WPEC9rAEJ+zPgqrpw+7+lZGzCBrUmwZ4sF5MpktppOezUw+kLOZ/q2T4i+G+C4oZctiyrt3I5nvFS5lUqQniK27Hc36O3ifGfXUDxrii1hzv7r6krxzMht81d6T/Vz/84/ucZ6IOQdNqkUu/dx4k+AllAg3mpR1A8KJHy51A7stNJsTE1Wz2EATQrvoDxXl9p1sAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "Echoes-dev-Notif/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "EventBusArn": {
   "Description": "EventBridge bus ARN",
   "Value": {
    "Fn::GetAtt": [
     "EchoesEventBus28950D13",
     "Arn"
    ]
   },
   "Export": {
    "Name": "dev-EventBusArn"
   }
  },
  "EventBusName": {
   "Description": "EventBridge bus name",
   "Value": {
    "Ref": "EchoesEventBus28950D13"
   },
   "Export": {
    "Name": "dev-EventBusName"
   }
  },
  "SnsTopicArn": {
   "Description": "SNS topic ARN for notifications",
   "Value": {
    "Ref": "EchoesNotificationTopic42CDF0DE"
   },
   "Export": {
    "Name": "dev-SnsTopicArn"
   }
  },
  "NotificationLambdaArn": {
   "Description": "Notification Lambda function ARN",
   "Value": {
    "Fn::GetAtt": [
     "NotificationLambda0BF28E71",
     "Arn"
    ]
   },
   "Export": {
    "Name": "dev-NotificationLambdaArn"
   }
  },
  "NotificationQueueUrl": {
   "Description": "SQS queue URL for notifications",
   "Value": {
    "Ref": "NotificationQueue36610CC1"
   },
   "Export": {
    "Name": "dev-NotificationQueueUrl"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}