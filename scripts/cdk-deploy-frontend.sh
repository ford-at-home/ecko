#!/bin/bash

# CDK-based Frontend Deployment Script
# Uses CDK outputs instead of hardcoded values
# Automatically builds, deploys, and invalidates CloudFront

set -e

echo "üöÄ Starting CDK-based frontend deployment..."

# Configuration
ENVIRONMENT="${1:-dev}"
AWS_PROFILE="${AWS_PROFILE:-personal}"
AWS_REGION="${AWS_REGION:-us-east-1}"
CDK_APP_DIR="$(dirname "$0")/../cdk"
FRONTEND_DIR="$(dirname "$0")/../frontend"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to get CDK output value
get_cdk_output() {
    local stack_name=$1
    local output_name=$2
    aws cloudformation describe-stacks \
        --stack-name "$stack_name" \
        --query "Stacks[0].Outputs[?OutputKey=='$output_name'].OutputValue" \
        --output text \
        --profile "$AWS_PROFILE" \
        --region "$AWS_REGION" 2>/dev/null || echo ""
}

# Function to get all required CDK outputs
get_frontend_config() {
    echo -e "${BLUE}üìã Fetching CDK outputs...${NC}"
    
    # Get output values from different stacks
    API_URL=$(get_cdk_output "Echoes-${ENVIRONMENT}-Api" "ApiGatewayUrl")
    USER_POOL_ID=$(get_cdk_output "Echoes-${ENVIRONMENT}-Auth" "UserPoolId")
    CLIENT_ID=$(get_cdk_output "Echoes-${ENVIRONMENT}-Auth" "UserPoolClientId")
    S3_BUCKET=$(get_cdk_output "Echoes-${ENVIRONMENT}-Storage" "AudioBucketName")
    FRONTEND_BUCKET=$(get_cdk_output "Echoes-${ENVIRONMENT}-Frontend" "WebsiteBucketName")
    CLOUDFRONT_ID=$(get_cdk_output "Echoes-${ENVIRONMENT}-Network" "DistributionId")
    CLOUDFRONT_URL=$(get_cdk_output "Echoes-${ENVIRONMENT}-Network" "FrontendUrl")
    
    # Validate outputs
    if [ -z "$API_URL" ] || [ -z "$USER_POOL_ID" ] || [ -z "$CLIENT_ID" ] || [ -z "$S3_BUCKET" ] || [ -z "$FRONTEND_BUCKET" ]; then
        echo -e "${RED}‚ùå Error: Missing required CDK outputs. Please ensure all stacks are deployed.${NC}"
        echo "API_URL: $API_URL"
        echo "USER_POOL_ID: $USER_POOL_ID"
        echo "CLIENT_ID: $CLIENT_ID"
        echo "S3_BUCKET: $S3_BUCKET"
        echo "FRONTEND_BUCKET: $FRONTEND_BUCKET"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ CDK outputs fetched successfully${NC}"
}

# Function to generate .env file from CDK outputs
generate_env_file() {
    echo -e "${BLUE}üìù Generating .env.production file...${NC}"
    
    cat > "$FRONTEND_DIR/.env.production" << EOF
# Production Environment Variables for Echoes Frontend
# Generated by CDK Deployment Script on $(date)

# API Configuration
VITE_API_URL=$API_URL

# AWS Cognito Configuration
VITE_AWS_REGION=$AWS_REGION
VITE_COGNITO_USER_POOL_ID=$USER_POOL_ID
VITE_COGNITO_CLIENT_ID=$CLIENT_ID
VITE_COGNITO_REGION=$AWS_REGION

# S3 Configuration
VITE_S3_BUCKET=$S3_BUCKET
VITE_S3_REGION=$AWS_REGION

# CloudFront Configuration
VITE_CLOUDFRONT_URL=$CLOUDFRONT_URL

# Feature Flags
VITE_ENABLE_AUDIO_PROCESSING=true
VITE_ENABLE_NOTIFICATIONS=true
VITE_ENABLE_ANALYTICS=false

# Application Settings
VITE_MAX_AUDIO_DURATION=30
VITE_MIN_AUDIO_DURATION=10
VITE_MAX_FILE_SIZE=52428800

# Environment
VITE_ENVIRONMENT=production
VITE_DEBUG=false
EOF
    
    echo -e "${GREEN}‚úÖ Environment file generated${NC}"
}

# Function to build frontend
build_frontend() {
    echo -e "${BLUE}üî® Building frontend...${NC}"
    
    cd "$FRONTEND_DIR"
    
    # Install dependencies if needed
    if [ ! -d "node_modules" ]; then
        echo "Installing dependencies..."
        npm install
    fi
    
    # Build the frontend
    npm run build
    
    if [ ! -d "dist" ]; then
        echo -e "${RED}‚ùå Error: Frontend build failed. No dist directory found.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Frontend built successfully${NC}"
}

# Function to deploy to S3
deploy_to_s3() {
    echo -e "${BLUE}‚òÅÔ∏è  Deploying to S3...${NC}"
    
    # Sync built files to S3
    aws s3 sync "$FRONTEND_DIR/dist" "s3://$FRONTEND_BUCKET" \
        --delete \
        --cache-control "max-age=3600" \
        --exclude "*.html" \
        --profile "$AWS_PROFILE"
    
    # Upload HTML files with no-cache headers
    aws s3 sync "$FRONTEND_DIR/dist" "s3://$FRONTEND_BUCKET" \
        --delete \
        --cache-control "no-cache, no-store, must-revalidate" \
        --exclude "*" \
        --include "*.html" \
        --profile "$AWS_PROFILE"
    
    echo -e "${GREEN}‚úÖ Deployed to S3${NC}"
}

# Function to invalidate CloudFront
invalidate_cloudfront() {
    if [ -z "$CLOUDFRONT_ID" ]; then
        echo -e "${RED}‚ö†Ô∏è  Warning: No CloudFront distribution ID found. Skipping cache invalidation.${NC}"
        return
    fi
    
    echo -e "${BLUE}üîÑ Invalidating CloudFront cache...${NC}"
    
    INVALIDATION_ID=$(aws cloudfront create-invalidation \
        --distribution-id "$CLOUDFRONT_ID" \
        --paths "/*" \
        --query 'Invalidation.Id' \
        --output text \
        --profile "$AWS_PROFILE")
    
    echo "Invalidation ID: $INVALIDATION_ID"
    
    # Wait for invalidation to complete (optional)
    if [ "${WAIT_FOR_INVALIDATION:-false}" = "true" ]; then
        echo "Waiting for invalidation to complete..."
        aws cloudfront wait invalidation-completed \
            --distribution-id "$CLOUDFRONT_ID" \
            --id "$INVALIDATION_ID" \
            --profile "$AWS_PROFILE"
    fi
    
    echo -e "${GREEN}‚úÖ CloudFront cache invalidated${NC}"
}

# Function to display deployment summary
display_summary() {
    echo -e "\n${GREEN}üéâ Deployment Complete!${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "Environment: ${BLUE}$ENVIRONMENT${NC}"
    echo -e "Frontend URL: ${BLUE}${CLOUDFRONT_URL:-https://$FRONTEND_BUCKET.s3-website-$AWS_REGION.amazonaws.com}${NC}"
    echo -e "API URL: ${BLUE}$API_URL${NC}"
    echo -e "S3 Bucket: ${BLUE}$FRONTEND_BUCKET${NC}"
    if [ -n "$CLOUDFRONT_ID" ]; then
        echo -e "CloudFront ID: ${BLUE}$CLOUDFRONT_ID${NC}"
    fi
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

# Main deployment flow
main() {
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}   Echoes Frontend CDK Deployment${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
    
    # Check if AWS CLI is installed
    if ! command -v aws &> /dev/null; then
        echo -e "${RED}‚ùå Error: AWS CLI is not installed${NC}"
        exit 1
    fi
    
    # Get CDK outputs
    get_frontend_config
    
    # Generate environment file
    generate_env_file
    
    # Build frontend
    build_frontend
    
    # Deploy to S3
    deploy_to_s3
    
    # Invalidate CloudFront
    invalidate_cloudfront
    
    # Display summary
    display_summary
}

# Run main function
main

# Exit successfully
exit 0