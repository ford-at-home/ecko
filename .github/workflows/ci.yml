name: 🔬 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'web/**'
              - 'mobile/**'
              - 'package.json'
              - 'package-lock.json'
            backend:
              - 'api/**'
              - 'lambda/**'
              - 'backend/**'
              - 'requirements.txt'
              - 'pyproject.toml'
            infrastructure:
              - 'cdk/**'
              - 'infrastructure/**'
              - 'aws/**'
            docs:
              - 'docs/**'
              - '*.md'

  lint-and-format:
    name: 🧹 Lint & Format
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.infrastructure == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.infrastructure == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        if: ${{ needs.changes.outputs.backend == 'true' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Node dependencies
        if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.infrastructure == 'true' }}
        run: npm ci

      - name: Install Python dependencies
        if: ${{ needs.changes.outputs.backend == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Lint TypeScript/JavaScript
        if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.infrastructure == 'true' }}
        run: |
          npm run lint:check || echo "Linting failed - will be fixed in format step"
          npm run format:check || echo "Formatting needed - will be fixed in format step"

      - name: Lint Python
        if: ${{ needs.changes.outputs.backend == 'true' }}
        run: |
          flake8 --max-line-length=88 --extend-ignore=E203,W503 .
          black --check --diff .
          isort --check-only --diff .
          mypy . || echo "Type checking found issues"

  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    needs: [changes, lint-and-format]
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true

      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true

      - name: Build frontend
        run: npm run build

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  test-backend:
    name: 🧪 Test Backend  
    runs-on: ubuntu-latest
    needs: [changes, lint-and-format]
    if: ${{ needs.changes.outputs.backend == 'true' }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run tests with pytest
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
        env:
          ENVIRONMENT: test

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  test-infrastructure:
    name: 🏗️ Test Infrastructure
    runs-on: ubuntu-latest
    needs: [changes, lint-and-format]
    if: ${{ needs.changes.outputs.infrastructure == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install CDK dependencies
        run: |
          npm ci
          npm install -g aws-cdk
          python -m pip install --upgrade pip
          pip install aws-cdk-lib constructs

      - name: CDK Synth (validate templates)
        run: |
          cd cdk
          cdk synth --all
        env:
          CDK_DEFAULT_ACCOUNT: 123456789012
          CDK_DEFAULT_REGION: us-east-1

      - name: Run CDK unit tests
        run: |
          cd cdk
          npm test

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (if frontend changes)
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: |
          npm audit --audit-level=moderate
          npm audit fix --dry-run

      - name: Run safety check (if backend changes)
        if: ${{ needs.changes.outputs.backend == 'true' }}
        run: |
          pip install safety
          safety check

  build-summary:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-infrastructure, security-scan]
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.test-frontend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.test-backend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Tests | ${{ needs.test-infrastructure.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-frontend.result }}" == "failure" || "${{ needs.test-backend.result }}" == "failure" || "${{ needs.test-infrastructure.result }}" == "failure" || "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ Build failed - check individual job results"
            exit 1
          else
            echo "✅ All checks passed!"
          fi