[tool:pytest]
# Pytest configuration for Echoes backend testing

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests/backend tests/integration tests/security tests/performance

# Minimum version
minversion = 6.0

# Add options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=app
    --cov-report=html:test-results/backend/coverage
    --cov-report=xml:test-results/backend/coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --junitxml=test-results/backend/junit.xml
    --html=test-results/backend/report.html
    --self-contained-html

# Markers for test categorization
markers =
    unit: Unit tests
    integration: Integration tests  
    security: Security tests
    performance: Performance tests
    slow: Slow running tests
    auth: Authentication tests
    database: Database tests
    s3: S3 storage tests
    api: API endpoint tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    load: Load testing
    stress: Stress testing
    vulnerability: Vulnerability tests

# Filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::RuntimeWarning

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test-results/backend/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Asyncio configuration
asyncio_mode = auto

# Cache directory
cache_dir = .pytest_cache

# Timeout for tests
timeout = 300

# Parallel execution
# Note: Install pytest-xdist for parallel execution
# Run with: pytest -n auto